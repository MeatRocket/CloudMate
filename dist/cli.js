#!/usr/bin/env node
"use strict";
exports.__esModule = true;
var main_1 = require("./main");
var fs = require("fs");
var path = require("path");
var minimist = require("minimist");
var matePackage;
var setPackage = function () {
    matePackage = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'package.json')).toString());
};
var getPackageInfo = function (info) {
    if (!matePackage)
        setPackage();
    return matePackage[info];
};
// Args
var args = minimist(process.argv.slice(2));
var versionArgs = args.v || args.version;
var helpArgs = args.h || args.help;
var watchArgs = args.w || args.watch;
var allArgs = args.a || args.all;
var builds = allArgs === true ? null : args._;
// Version
if (versionArgs)
    console.log(getPackageInfo('version'));
// Help
if (helpArgs) {
    console.log('Usage: mate [builds] [options]');
    console.log('mate\t\t\t will run dev build only');
    console.log('mate dist\t\t will run dist build only');
    console.log('mate dev dist abc\t will run dev, dist, and abc builds only');
    console.log('\nOptions:');
    console.log('-a, --all\t\t run all builds');
    console.log('-h, --help\t\t print mate command line options (currently set)');
    console.log('-v, --version\t\t print CloudMate.js version');
    console.log('-w, --watch\t\t watch defined inputs under the specified build(s)');
}
if (!versionArgs && !helpArgs) {
    if (watchArgs)
        main_1.watch(builds);
    else
        main_1.runBuild(builds);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSwrQkFBeUM7QUFDekMsdUJBQTBCO0FBQzFCLDJCQUE4QjtBQUM5QixtQ0FBc0M7QUFLdEMsSUFBSSxXQUFtQixDQUFDO0FBQ3hCLElBQU0sVUFBVSxHQUFHO0lBQ2YsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDbEcsQ0FBQyxDQUFBO0FBRUQsSUFBTSxjQUFjLEdBQUcsVUFBUyxJQUFZO0lBRXhDLElBQUksQ0FBQyxXQUFXO1FBQ1osVUFBVSxFQUFFLENBQUM7SUFFakIsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0IsQ0FBQyxDQUFBO0FBRUQsT0FBTztBQUVQLElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTdDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUMzQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDckMsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3ZDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNuQyxJQUFNLE1BQU0sR0FBRyxPQUFPLEtBQUssSUFBSSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFFL0MsVUFBVTtBQUVWLElBQUksV0FBVztJQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFFM0MsT0FBTztBQUVQLElBQUksUUFBUSxFQUFDO0lBRVQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLENBQUMsQ0FBQztJQUNsRCxPQUFPLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7SUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO0lBQzNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztJQUM5RSxPQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO0NBQ3BGO0FBRUQsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLFFBQVEsRUFDN0I7SUFDSSxJQUFJLFNBQVM7UUFDVCxZQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7O1FBQ2IsZUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3pCIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcclxuXHJcbmltcG9ydCB7IHJ1bkJ1aWxkLCB3YXRjaCB9IGZyb20gXCIuL21haW5cIjtcclxuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcbmltcG9ydCBtaW5pbWlzdCA9IHJlcXVpcmUoJ21pbmltaXN0Jyk7XHJcblxyXG5cclxuXHJcblxyXG5sZXQgbWF0ZVBhY2thZ2U6IG9iamVjdDtcclxuY29uc3Qgc2V0UGFja2FnZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICBtYXRlUGFja2FnZSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdwYWNrYWdlLmpzb24nKSkudG9TdHJpbmcoKSk7XHJcbn1cclxuXHJcbmNvbnN0IGdldFBhY2thZ2VJbmZvID0gZnVuY3Rpb24oaW5mbzogc3RyaW5nKXtcclxuXHJcbiAgICBpZiAoIW1hdGVQYWNrYWdlKVxyXG4gICAgICAgIHNldFBhY2thZ2UoKTtcclxuXHJcbiAgICByZXR1cm4gbWF0ZVBhY2thZ2VbaW5mb107XHJcbn1cclxuXHJcbi8vIEFyZ3NcclxuXHJcbmNvbnN0IGFyZ3MgPSBtaW5pbWlzdChwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpO1xyXG5cclxuY29uc3QgdmVyc2lvbkFyZ3MgPSBhcmdzLnYgfHwgYXJncy52ZXJzaW9uO1xyXG5jb25zdCBoZWxwQXJncyA9IGFyZ3MuaCB8fCBhcmdzLmhlbHA7XHJcbmNvbnN0IHdhdGNoQXJncyA9IGFyZ3MudyB8fCBhcmdzLndhdGNoO1xyXG5jb25zdCBhbGxBcmdzID0gYXJncy5hIHx8IGFyZ3MuYWxsO1xyXG5jb25zdCBidWlsZHMgPSBhbGxBcmdzID09PSB0cnVlPyBudWxsIDogYXJncy5fO1xyXG5cclxuLy8gVmVyc2lvblxyXG5cclxuaWYgKHZlcnNpb25BcmdzKVxyXG4gICAgY29uc29sZS5sb2coZ2V0UGFja2FnZUluZm8oJ3ZlcnNpb24nKSk7XHJcblxyXG4vLyBIZWxwXHJcblxyXG5pZiAoaGVscEFyZ3Mpe1xyXG4gXHJcbiAgICBjb25zb2xlLmxvZygnVXNhZ2U6IG1hdGUgW2J1aWxkc10gW29wdGlvbnNdJyk7XHJcbiAgICBjb25zb2xlLmxvZygnbWF0ZVxcdFxcdFxcdCB3aWxsIHJ1biBkZXYgYnVpbGQgb25seScpO1xyXG4gICAgY29uc29sZS5sb2coJ21hdGUgZGlzdFxcdFxcdCB3aWxsIHJ1biBkaXN0IGJ1aWxkIG9ubHknKTtcclxuICAgIGNvbnNvbGUubG9nKCdtYXRlIGRldiBkaXN0IGFiY1xcdCB3aWxsIHJ1biBkZXYsIGRpc3QsIGFuZCBhYmMgYnVpbGRzIG9ubHknKTtcclxuICAgIGNvbnNvbGUubG9nKCdcXG5PcHRpb25zOicpO1xyXG4gICAgY29uc29sZS5sb2coJy1hLCAtLWFsbFxcdFxcdCBydW4gYWxsIGJ1aWxkcycpO1xyXG4gICAgY29uc29sZS5sb2coJy1oLCAtLWhlbHBcXHRcXHQgcHJpbnQgbWF0ZSBjb21tYW5kIGxpbmUgb3B0aW9ucyAoY3VycmVudGx5IHNldCknKTtcclxuICAgIGNvbnNvbGUubG9nKCctdiwgLS12ZXJzaW9uXFx0XFx0IHByaW50IENsb3VkTWF0ZS5qcyB2ZXJzaW9uJyk7XHJcbiAgICBjb25zb2xlLmxvZygnLXcsIC0td2F0Y2hcXHRcXHQgd2F0Y2ggZGVmaW5lZCBpbnB1dHMgdW5kZXIgdGhlIHNwZWNpZmllZCBidWlsZChzKScpO1xyXG59XHJcblxyXG5pZiAoIXZlcnNpb25BcmdzICYmICFoZWxwQXJncylcclxue1xyXG4gICAgaWYgKHdhdGNoQXJncylcclxuICAgICAgICB3YXRjaChidWlsZHMpO1xyXG4gICAgZWxzZSBydW5CdWlsZChidWlsZHMpO1xyXG59Il19
