"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var through = require("through2");
module.exports = function () {
    return through.obj(function (vinylFile, encoding, callback) {
        var transformedFile = vinylFile.clone();
        var content = 'var exports = {};\n' + transformedFile.contents.toString();
        content = CloudMateWebCleanJS.updateDefaultVariables(content);
        var lines = content.split('\n');
        var removables_Requires = [];
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i];
            if (line.indexOf(' require(') === -1)
                continue;
            removables_Requires.push(line);
            var prefix = line.split(' ')[1];
            if (prefix.indexOf('_') !== -1)
                removables_Requires.push(prefix + '.');
        }
        removables_Requires.forEach(function (value) {
            if (value.indexOf('=') === 0)
                return;
            if (value.indexOf('=') !== -1)
                content = content.replace(value, '');
            else
                content = content.replace(new RegExp(value.trim(), 'gi'), '');
        });
        transformedFile.contents = new Buffer(content);
        callback(null, transformedFile);
    });
};
var CloudMateWebCleanJS = (function () {
    function CloudMateWebCleanJS() {
    }
    CloudMateWebCleanJS.updateDefaultVariables = function (content) {
        content = content.replace(/(_)\d(.default)/gmi, '');
        return content;
    };
    return CloudMateWebCleanJS;
}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmNsZWFuanMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrQ0FBcUM7QUFHckMsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUViLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLFNBQWdCLEVBQUUsUUFBZ0IsRUFBRSxRQUFrQjtRQUsvRSxJQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFNMUMsSUFBSSxPQUFPLEdBQUcscUJBQXFCLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxRSxPQUFPLEdBQUcsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFOUQsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsQyxJQUFNLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztRQUUvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUVuQyxJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFdEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEMsU0FBUztZQUViLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUvQixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWxDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzFCLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDOUM7UUFFRCxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLO1lBRXZDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUN4QixPQUFPO1lBRVgsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDekIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDOztnQkFFckMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBRUgsZUFBZSxDQUFDLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUcvQyxRQUFRLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBRXBDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBRUY7SUFBQTtJQWdDQSxDQUFDO0lBOUJVLDBDQUFzQixHQUE3QixVQUE4QixPQUFlO1FBRXpDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXBELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUF5QkwsMEJBQUM7QUFBRCxDQWhDQSxBQWdDQyxJQUFBIiwiZmlsZSI6IndlYmNsZWFuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGhyb3VnaCA9IHJlcXVpcmUoJ3Rocm91Z2gyJyk7XHJcbmltcG9ydCB2aW55bCA9IHJlcXVpcmUoJ3ZpbnlsJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICByZXR1cm4gdGhyb3VnaC5vYmooZnVuY3Rpb24gKHZpbnlsRmlsZTogdmlueWwsIGVuY29kaW5nOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xyXG5cclxuICAgICAgICAvLyAxLiBjbG9uZSBuZXcgdmlueWwgZmlsZSBmb3IgbWFuaXB1bGF0aW9uXHJcbiAgICAgICAgLy8gKFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VhcmVmcmFjdGFsL3ZpbnlsIGZvciB2aW55bCBhdHRyaWJ1dGVzIGFuZCBmdW5jdGlvbnMpXHJcblxyXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkRmlsZSA9IHZpbnlsRmlsZS5jbG9uZSgpO1xyXG5cclxuICAgICAgICAvLyAyLiBzZXQgbmV3IGNvbnRlbnRzXHJcbiAgICAgICAgLy8gKiBjb250ZW50cyBjYW4gb25seSBiZSBhIEJ1ZmZlciwgU3RyZWFtLCBvciBudWxsXHJcbiAgICAgICAgLy8gKiBUaGlzIGFsbG93cyB1cyB0byBtb2RpZnkgdGhlIHZpbnlsIGZpbGUgaW4gbWVtb3J5IGFuZCBwcmV2ZW50cyB0aGUgbmVlZCB0byB3cml0ZSBiYWNrIHRvIHRoZSBmaWxlIHN5c3RlbS5cclxuXHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSAndmFyIGV4cG9ydHMgPSB7fTtcXG4nICsgdHJhbnNmb3JtZWRGaWxlLmNvbnRlbnRzLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgY29udGVudCA9IENsb3VkTWF0ZVdlYkNsZWFuSlMudXBkYXRlRGVmYXVsdFZhcmlhYmxlcyhjb250ZW50KTtcclxuXHJcbiAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVtb3ZhYmxlc19SZXF1aXJlcyA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoJyByZXF1aXJlKCcpID09PSAtMSlcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgcmVtb3ZhYmxlc19SZXF1aXJlcy5wdXNoKGxpbmUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gbGluZS5zcGxpdCgnICcpWzFdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHByZWZpeC5pbmRleE9mKCdfJykgIT09IC0xKVxyXG4gICAgICAgICAgICAgICAgcmVtb3ZhYmxlc19SZXF1aXJlcy5wdXNoKHByZWZpeCArICcuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW1vdmFibGVzX1JlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUuaW5kZXhPZignPScpID09PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJz0nKSAhPT0gLTEpXHJcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKHZhbHVlLCAnJyk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UobmV3IFJlZ0V4cCh2YWx1ZS50cmltKCksICdnaScpLCAnJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRyYW5zZm9ybWVkRmlsZS5jb250ZW50cyA9IG5ldyBCdWZmZXIoY29udGVudCk7XHJcblxyXG4gICAgICAgIC8vIDMuIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgZmlsZSBmb3IgdXNlIGluIG5leHQgYHBpcGUoKWBcclxuICAgICAgICBjYWxsYmFjayhudWxsLCB0cmFuc2Zvcm1lZEZpbGUpO1xyXG5cclxuICAgIH0pO1xyXG59O1xyXG5cclxuY2xhc3MgQ2xvdWRNYXRlV2ViQ2xlYW5KUyB7XHJcblxyXG4gICAgc3RhdGljIHVwZGF0ZURlZmF1bHRWYXJpYWJsZXMoY29udGVudDogc3RyaW5nKTogc3RyaW5ne1xyXG5cclxuICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC8oXylcXGQoLmRlZmF1bHQpL2dtaSwgJycpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzdGF0aWMgcmVtb3ZlTm9uRGVwZW5kYW5jaWVzTGluZXMoY29udGVudDogc3RyaW5nKTogc3RyaW5ne1xyXG5cclxuICAgIC8vICAgICBjb25zdCBzdGFydFdpdGhWYWx1ZXMgPSBbXHJcbiAgICAvLyAgICAgICAgICdPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cycsXHJcbiAgICAvLyAgICAgICAgICdleHBvcnRzLidcclxuICAgIC8vICAgICBdO1xyXG5cclxuICAgIC8vICAgICBsZXQgcmVzdWx0ID0gJyc7XHJcblxyXG4gICAgLy8gICAgIGZvcihjb25zdCBsaW5lIG9mIGNvbnRlbnQuc3BsaXQoJ1xcbicpKXtcclxuICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIGxldCBzYWZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIGZvcihjb25zdCBzdGFydFdpdGggb2Ygc3RhcnRXaXRoVmFsdWVzKVxyXG4gICAgLy8gICAgICAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aChzdGFydFdpdGgpKVxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNhZmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIGlmIChzYWZlKVxyXG4gICAgLy8gICAgICAgICAgICAgcmVzdWx0ICs9IGxpbmUgKyAnXFxuJztcclxuICAgIC8vICAgICB9XHJcblxyXG4gICAgLy8gICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAvLyB9XHJcbn0iXX0=
