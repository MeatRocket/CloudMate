"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./config");
var chokidar = require("chokidar");
var gulp = require('gulp');
var gulpLess = require('gulp-less');
var gulpSass = require('gulp-sass');
var gulpRename = require('gulp-rename');
var gulpConcat = require("gulp-concat");
var gulpTs = require("gulp-typescript");
var gulpSourcemaps = require("gulp-sourcemaps");
var gulpMinify = require('gulp-minify');
var merge2 = require('merge2');
var gulpCleanCSS = require('gulp-clean-css');
var gulpFilter = require('gulp-filter-each');
var path = require('path');
var webClean = require('./webcleanjs');
var bundle = function (files, build) {
    var process = [];
    var groupFilesExtention = '';
    var groupedFiles = [];
    files.forEach(function (file) {
        var fileExtention = file.split('.').pop().toLowerCase();
        if (fileExtention !== groupFilesExtention) {
            if (groupedFiles.length > 0) {
                process.push(compile(groupedFiles, groupFilesExtention, build));
                groupedFiles = [];
            }
            groupFilesExtention = fileExtention;
        }
        groupedFiles.push(file);
    });
    if (groupedFiles.length > 0)
        process.push(compile(groupedFiles, groupFilesExtention, build));
    var stream = merge2();
    process.forEach(function (p) {
        stream.add(p);
    });
    return stream;
};
var compile = function (files, extention, build) {
    var process = gulp.src(files);
    switch (extention) {
        case 'css':
            return process.pipe(gulpConcat('empty'));
        case 'less':
            if (build.css.sourceMap)
                process = process.pipe(gulpSourcemaps.init());
            process = process.pipe(gulpLess());
            if (build.css.sourceMap)
                process = process.pipe(gulpSourcemaps.write());
            return process.pipe(gulpConcat('empty'));
        case 'scss':
            if (build.css.sourceMap)
                process = process.pipe(gulpSourcemaps.init());
            process = process.pipe(gulpSass().on('error', gulpSass.logError));
            if (build.css.sourceMap)
                process = process.pipe(gulpSourcemaps.write());
            return process.pipe(gulpConcat('empty'));
        case 'ts':
            if (build.js.sourceMap)
                process = process.pipe(gulpSourcemaps.init());
            process = process.pipe(gulpTs(build.ts.compilerOptions));
            if (build.js.sourceMap)
                process = process.pipe(gulpSourcemaps.write());
            return process.pipe(gulpConcat('empty'));
        case 'd.ts':
            return process.pipe(gulpTs(config_1.MateConfigTSConfig.declarationCompilerOptions(build.ts.compilerOptions)));
    }
    return process;
};
var createTypeScriptDeclaration = function (files, outputDirectory, outputFileName, build) {
    var typescriptDeclarations = [];
    files.forEach(function (file) {
        var fileExtention = file.split('.').pop().toLowerCase();
        if (fileExtention === 'ts')
            typescriptDeclarations.push(file);
    });
    if (typescriptDeclarations.length > 0)
        compile(typescriptDeclarations, 'd.ts', build)
            .pipe(gulpFilter(function (content, filepath) { return filepath.toLowerCase().endsWith('.d.ts'); }))
            .pipe(gulpConcat('empty'))
            .pipe(gulpRename({
            basename: outputFileName.replace('.js', ''),
            suffix: '.d',
            extname: '.ts'
        }))
            .pipe(gulp.dest(outputDirectory));
};
var allWatchers = [];
exports.watch = function (builds) {
    if (builds === undefined || (builds !== null && builds.length === 0))
        builds = ['dev'];
    var configWatcher = chokidar.watch('mateconfig.json', { persistent: true })
        .on('change', function (event, path) {
        allWatchers.forEach(function (watcher) {
            watcher.close();
        });
        allWatchers = [];
        exports.watch(builds);
    });
    allWatchers.push(configWatcher);
    var config = config_1.MateConfig.get();
    config.files.forEach(function (file) {
        file.builds.forEach(function (buildName) {
            if (builds === null || builds.indexOf(buildName) !== -1) {
                var extensions = ['less', 'scss'];
                var watchPaths_1 = [];
                file.input.forEach(function (path) {
                    watchPaths_1.push(path);
                });
                for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
                    var extension = extensions_1[_i];
                    if (config_1.MateConfigFile.hasExtension(file.input, extension))
                        watchPaths_1.push('./**/*.' + extension);
                }
                var watch_1 = chokidar.watch(watchPaths_1, { persistent: true })
                    .on('change', function (event, path) {
                    runFiles(config, file, [buildName]);
                });
                allWatchers.push(watch_1);
            }
        });
    });
    exports.runBuild(builds);
};
exports.runBuild = function (builds) {
    console.log('executed at ' + new Date().toTimeString());
    var config = config_1.MateConfig.get();
    config.files.forEach(function (file) {
        runFiles(config, file, builds);
    });
};
var runFiles = function (config, file, builds) {
    if (builds === undefined || (builds !== null && builds.length === 0))
        builds = ['dev'];
    file.output.forEach(function (output) {
        var outputExtention = output.split('.').pop().toLowerCase();
        var outputFileName = output.replace(/^.*[\\\/]/, '');
        file.builds.forEach(function (buildName) {
            if (builds !== null && builds.indexOf(buildName) === -1)
                return;
            var build = config.getBuild(buildName);
            var outputDirectory = build.outDir ? build.outDir : path.dirname(output);
            if (build.outDirVersioning)
                outputDirectory += '/' + config.getOutDirVersion();
            if (build.outDirName)
                outputDirectory += '/' + config.getOutDirName();
            switch (outputExtention) {
                case 'css':
                    if (build.css.outDirSuffix)
                        outputDirectory += '/' + build.css.outDirSuffix;
                    break;
                case 'js':
                    if (build.js.outDirSuffix)
                        outputDirectory += '/' + build.js.outDirSuffix;
                    break;
            }
            if (build.js.declaration === true)
                createTypeScriptDeclaration(file.input, outputDirectory, outputFileName, build);
            var process = bundle(file.input, build)
                .pipe(gulpConcat('empty'));
            switch (outputExtention) {
                case 'js':
                    if (build.js.webClean)
                        process = process.pipe(webClean());
                    break;
            }
            process = process.pipe(gulpRename(outputFileName))
                .pipe(gulp.dest(outputDirectory));
            switch (outputExtention) {
                case 'css':
                    if (build.css.minify) {
                        process.pipe(gulpCleanCSS())
                            .pipe(gulpRename({ suffix: ".min" }))
                            .pipe(gulp.dest(outputDirectory));
                    }
                    break;
                case 'js':
                    if (build.js.minify) {
                        process.pipe(gulpMinify({
                            ext: {
                                src: '.js',
                                min: '.min.js'
                            }
                        }))
                            .pipe(gulp.dest(outputDirectory));
                    }
                    break;
            }
        });
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOzZCQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7NkJBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7cUJBQ3JDO29CQUNELE1BQU07Z0JBRVYsS0FBSyxJQUFJO29CQUVMLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUU7d0JBRWpCLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDOzRCQUNwQixHQUFHLEVBQUM7Z0NBQ0EsR0FBRyxFQUFDLEtBQUs7Z0NBQ1QsR0FBRyxFQUFDLFNBQVM7NkJBQ2hCO3lCQUFDLENBQUMsQ0FBQzs2QkFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO3FCQUNyQztvQkFDRCxNQUFNO2FBQ2I7UUFFTCxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXRlQ29uZmlnLCBNYXRlQ29uZmlnQ1NTQ29uZmlnLCBNYXRlQ29uZmlnQnVpbGQsIE1hdGVDb25maWdGaWxlLCBNYXRlQ29uZmlnVFNDb25maWcgfSBmcm9tIFwiLi9jb25maWdcIjtcclxuaW1wb3J0IGNob2tpZGFyID0gcmVxdWlyZSgnY2hva2lkYXInKTtcclxuXHJcbmNvbnN0IGd1bHAgPSByZXF1aXJlKCdndWxwJyk7XHJcbmNvbnN0IGd1bHBMZXNzID0gcmVxdWlyZSgnZ3VscC1sZXNzJyk7XHJcbmNvbnN0IGd1bHBTYXNzID0gcmVxdWlyZSgnZ3VscC1zYXNzJyk7XHJcbmNvbnN0IGd1bHBSZW5hbWUgPSByZXF1aXJlKCdndWxwLXJlbmFtZScpO1xyXG5jb25zdCBndWxwQ29uY2F0ID0gcmVxdWlyZShcImd1bHAtY29uY2F0XCIpO1xyXG5jb25zdCBndWxwVHMgPSByZXF1aXJlKFwiZ3VscC10eXBlc2NyaXB0XCIpO1xyXG5jb25zdCBndWxwU291cmNlbWFwcyA9IHJlcXVpcmUoXCJndWxwLXNvdXJjZW1hcHNcIik7XHJcbmNvbnN0IGd1bHBNaW5pZnkgPSByZXF1aXJlKCdndWxwLW1pbmlmeScpO1xyXG5jb25zdCBtZXJnZTIgPSByZXF1aXJlKCdtZXJnZTInKTtcclxuY29uc3QgZ3VscENsZWFuQ1NTID0gcmVxdWlyZSgnZ3VscC1jbGVhbi1jc3MnKTtcclxuY29uc3QgZ3VscEZpbHRlciA9IHJlcXVpcmUoJ2d1bHAtZmlsdGVyLWVhY2gnKTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuY29uc3Qgd2ViQ2xlYW4gPSByZXF1aXJlKCcuL3dlYmNsZWFuanMnKTtcclxuXHJcbmNvbnN0IGJ1bmRsZSA9IGZ1bmN0aW9uKGZpbGVzOiBzdHJpbmdbXSwgYnVpbGQ6IE1hdGVDb25maWdCdWlsZCk6IGFueSB7XHJcblxyXG4gICAgY29uc3QgcHJvY2VzczogYW55W10gPSBbXTtcclxuXHJcbiAgICBsZXQgZ3JvdXBGaWxlc0V4dGVudGlvbiA9ICcnO1xyXG4gICAgbGV0IGdyb3VwZWRGaWxlczogc3RyaW5nW10gPSBbXTtcclxuICAgIFxyXG4gICAgZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT57XHJcblxyXG4gICAgICAgIGNvbnN0IGZpbGVFeHRlbnRpb24gPSBmaWxlLnNwbGl0KCcuJykucG9wKCkudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgaWYgKGZpbGVFeHRlbnRpb24gIT09IGdyb3VwRmlsZXNFeHRlbnRpb24pe1xyXG5cclxuICAgICAgICAgICAgaWYgKGdyb3VwZWRGaWxlcy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzLnB1c2goY29tcGlsZShncm91cGVkRmlsZXMsIGdyb3VwRmlsZXNFeHRlbnRpb24sIGJ1aWxkKSk7XHJcbiAgICAgICAgICAgICAgICBncm91cGVkRmlsZXMgPSBbXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBncm91cEZpbGVzRXh0ZW50aW9uID0gZmlsZUV4dGVudGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdyb3VwZWRGaWxlcy5wdXNoKGZpbGUpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChncm91cGVkRmlsZXMubGVuZ3RoID4gMClcclxuICAgICAgICBwcm9jZXNzLnB1c2goY29tcGlsZShncm91cGVkRmlsZXMsIGdyb3VwRmlsZXNFeHRlbnRpb24sIGJ1aWxkKSk7XHJcblxyXG4gICBjb25zdCBzdHJlYW0gPSBtZXJnZTIoKTtcclxuXHJcbiAgIHByb2Nlc3MuZm9yRWFjaCgocCkgPT57XHJcbiAgICBzdHJlYW0uYWRkKHApO1xyXG4gICB9KTtcclxuICAgIFxyXG4gICByZXR1cm4gc3RyZWFtO1xyXG59XHJcblxyXG5jb25zdCBjb21waWxlID0gZnVuY3Rpb24oZmlsZXM6IHN0cmluZ1tdLCBleHRlbnRpb246IHN0cmluZywgYnVpbGQ6IE1hdGVDb25maWdCdWlsZCk6IGFueSB7XHJcblxyXG4gICAgbGV0IHByb2Nlc3MgPSBndWxwLnNyYyhmaWxlcyk7XHJcblxyXG4gICAgc3dpdGNoIChleHRlbnRpb24pe1xyXG4gICAgICAgIGNhc2UgJ2Nzcyc6XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLnBpcGUoZ3VscENvbmNhdCgnZW1wdHknKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGNhc2UgJ2xlc3MnOlxyXG5cclxuICAgICAgICAgICAgaWYgKGJ1aWxkLmNzcy5zb3VyY2VNYXApXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzID0gcHJvY2Vzcy5waXBlKGd1bHBTb3VyY2VtYXBzLmluaXQoKSk7XHJcblxyXG4gICAgICAgICAgICBwcm9jZXNzID0gcHJvY2Vzcy5waXBlKGd1bHBMZXNzKCkpOyAgICBcclxuXHJcbiAgICAgICAgICAgIGlmIChidWlsZC5jc3Muc291cmNlTWFwKVxyXG4gICAgICAgICAgICAgICAgcHJvY2VzcyA9IHByb2Nlc3MucGlwZShndWxwU291cmNlbWFwcy53cml0ZSgpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLnBpcGUoZ3VscENvbmNhdCgnZW1wdHknKSk7XHJcblxyXG4gICAgICAgIGNhc2UgJ3Njc3MnOlxyXG5cclxuICAgICAgICAgICAgaWYgKGJ1aWxkLmNzcy5zb3VyY2VNYXApXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzID0gcHJvY2Vzcy5waXBlKGd1bHBTb3VyY2VtYXBzLmluaXQoKSk7XHJcblxyXG4gICAgICAgICAgICBwcm9jZXNzID0gcHJvY2Vzcy5waXBlKGd1bHBTYXNzKCkub24oJ2Vycm9yJywgZ3VscFNhc3MubG9nRXJyb3IpKTsgICAgXHJcblxyXG4gICAgICAgICAgICBpZiAoYnVpbGQuY3NzLnNvdXJjZU1hcClcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MgPSBwcm9jZXNzLnBpcGUoZ3VscFNvdXJjZW1hcHMud3JpdGUoKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5waXBlKGd1bHBDb25jYXQoJ2VtcHR5JykpO1xyXG4gICAgXHJcbiAgICAgICAgY2FzZSAndHMnOlxyXG5cclxuICAgICAgICAgICAgaWYgKGJ1aWxkLmpzLnNvdXJjZU1hcClcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MgPSBwcm9jZXNzLnBpcGUoZ3VscFNvdXJjZW1hcHMuaW5pdCgpKTtcclxuXHJcbiAgICAgICAgICAgIHByb2Nlc3MgPSBwcm9jZXNzLnBpcGUoZ3VscFRzKGJ1aWxkLnRzLmNvbXBpbGVyT3B0aW9ucykpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJ1aWxkLmpzLnNvdXJjZU1hcClcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MgPSBwcm9jZXNzLnBpcGUoZ3VscFNvdXJjZW1hcHMud3JpdGUoKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5waXBlKGd1bHBDb25jYXQoJ2VtcHR5JykpO1xyXG5cclxuICAgICAgICBjYXNlICdkLnRzJzpcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5waXBlKGd1bHBUcyhNYXRlQ29uZmlnVFNDb25maWcuZGVjbGFyYXRpb25Db21waWxlck9wdGlvbnMoYnVpbGQudHMuY29tcGlsZXJPcHRpb25zKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwcm9jZXNzO1xyXG59XHJcblxyXG5jb25zdCBjcmVhdGVUeXBlU2NyaXB0RGVjbGFyYXRpb24gPSBmdW5jdGlvbihmaWxlczogc3RyaW5nIFtdLCBvdXRwdXREaXJlY3Rvcnk6IHN0cmluZywgb3V0cHV0RmlsZU5hbWU6IHN0cmluZywgYnVpbGQ6IE1hdGVDb25maWdCdWlsZCk6IHZvaWQge1xyXG5cclxuICAgIGNvbnN0IHR5cGVzY3JpcHREZWNsYXJhdGlvbnM6IHN0cmluZ1tdID0gW107XHJcbiAgICBcclxuICAgIGZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcclxuICAgICAgICBjb25zdCBmaWxlRXh0ZW50aW9uID0gZmlsZS5zcGxpdCgnLicpLnBvcCgpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIGlmIChmaWxlRXh0ZW50aW9uID09PSAndHMnKVxyXG4gICAgICAgICAgICB0eXBlc2NyaXB0RGVjbGFyYXRpb25zLnB1c2goZmlsZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodHlwZXNjcmlwdERlY2xhcmF0aW9ucy5sZW5ndGggPiAwKVxyXG4gICAgICAgIGNvbXBpbGUodHlwZXNjcmlwdERlY2xhcmF0aW9ucywgJ2QudHMnLCBidWlsZClcclxuICAgICAgICAgICAgLnBpcGUoZ3VscEZpbHRlcigoY29udGVudCwgZmlsZXBhdGg6IHN0cmluZykgPT4gZmlsZXBhdGgudG9Mb3dlckNhc2UoKS5lbmRzV2l0aCgnLmQudHMnKSkpXHJcbiAgICAgICAgICAgIC5waXBlKGd1bHBDb25jYXQoJ2VtcHR5JykpXHJcbiAgICAgICAgICAgIC5waXBlKGd1bHBSZW5hbWUoe1xyXG4gICAgICAgICAgICAgICAgYmFzZW5hbWU6IG91dHB1dEZpbGVOYW1lLnJlcGxhY2UoJy5qcycsICcnKSxcclxuICAgICAgICAgICAgICAgIHN1ZmZpeDogJy5kJyxcclxuICAgICAgICAgICAgICAgIGV4dG5hbWU6ICcudHMnXHJcbiAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICAucGlwZShndWxwLmRlc3Qob3V0cHV0RGlyZWN0b3J5KSk7XHJcbn1cclxuXHJcbmxldCBhbGxXYXRjaGVyczogY2hva2lkYXIuRlNXYXRjaGVyW10gPSBbXTtcclxuXHJcbmV4cG9ydCBjb25zdCB3YXRjaCA9IGZ1bmN0aW9uKGJ1aWxkcz86IHN0cmluZ1tdKSB7XHJcblxyXG4gICAgaWYgKGJ1aWxkcyA9PT0gdW5kZWZpbmVkIHx8IChidWlsZHMgIT09IG51bGwgJiYgYnVpbGRzLmxlbmd0aCA9PT0gMCkpXHJcbiAgICAgICAgYnVpbGRzID0gWydkZXYnXTtcclxuXHJcbiAgICBjb25zdCBjb25maWdXYXRjaGVyID0gY2hva2lkYXIud2F0Y2goJ21hdGVjb25maWcuanNvbicsIHsgcGVyc2lzdGVudDogdHJ1ZX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbignY2hhbmdlJywgKGV2ZW50LCBwYXRoOiBzdHJpbmcpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxXYXRjaGVycy5mb3JFYWNoKCh3YXRjaGVyOiBjaG9raWRhci5GU1dhdGNoZXIpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hlci5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsV2F0Y2hlcnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXRjaChidWlsZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICBhbGxXYXRjaGVycy5wdXNoKGNvbmZpZ1dhdGNoZXIpO1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZyA9IE1hdGVDb25maWcuZ2V0KCk7XHJcblxyXG4gICAgY29uZmlnLmZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcclxuICAgICAgICBmaWxlLmJ1aWxkcy5mb3JFYWNoKChidWlsZE5hbWUpID0+IHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChidWlsZHMgPT09IG51bGwgfHwgYnVpbGRzLmluZGV4T2YoYnVpbGROYW1lKSAhPT0gLTEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBleHRlbnNpb25zID0gWydsZXNzJywgJ3Njc3MnXTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB3YXRjaFBhdGhzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZpbGUuaW5wdXQuZm9yRWFjaCgocGF0aCkgPT57XHJcbiAgICAgICAgICAgICAgICAgICAgd2F0Y2hQYXRocy5wdXNoKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZXh0ZW5zaW9uIG9mIGV4dGVuc2lvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGVDb25maWdGaWxlLmhhc0V4dGVuc2lvbihmaWxlLmlucHV0LCBleHRlbnNpb24pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXRjaFBhdGhzLnB1c2goJy4vKiovKi4nICsgZXh0ZW5zaW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB3YXRjaCA9IGNob2tpZGFyLndhdGNoKHdhdGNoUGF0aHMsIHsgcGVyc2lzdGVudDogdHJ1ZX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oJ2NoYW5nZScsIChldmVudCwgcGF0aDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuRmlsZXMoY29uZmlnLCBmaWxlLCBbYnVpbGROYW1lXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbGxXYXRjaGVycy5wdXNoKHdhdGNoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBhcHBlbmRXYXRjaEZvckltcG9ydGVkRmlsZXMoY29uZmlnLCBmaWxlLCBidWlsZE5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcnVuQnVpbGQoYnVpbGRzKTtcclxufVxyXG5cclxuLy8gY29uc3QgYXBwZW5kV2F0Y2hGb3JJbXBvcnRlZEZpbGVzID0gZnVuY3Rpb24oY29uZmlnOiBNYXRlQ29uZmlnLCBmaWxlOiBNYXRlQ29uZmlnRmlsZSwgYnVpbGROYW1lOiBzdHJpbmcpOiB2b2lke1xyXG5cclxuLy8gICAgIGNvbnN0IGV4dGVuc2lvbnMgPSBbJ2xlc3MnLCAnc2NzcyddO1xyXG5cclxuLy8gICAgIGV4dGVuc2lvbnMuZm9yRWFjaCgoZXh0ZW5zaW9uOiBzdHJpbmcpOiB2b2lkID0+IHtcclxuXHJcbi8vICAgICAgICAgaWYgKCFNYXRlQ29uZmlnRmlsZS5oYXNFeHRlbnNpb24oZmlsZS5pbnB1dCwgZXh0ZW5zaW9uKSlcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgXHJcbi8vICAgICAgICAgY29uc3Qgd2F0Y2ggPSBjaG9raWRhci53YXRjaCgnKiovKi4nICsgZXh0ZW5zaW9uLCB7IHBlcnNpc3RlbnQ6IHRydWV9KVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdjaGFuZ2UnLCAoZXZlbnQsIHBhdGg6IHN0cmluZykgPT4ge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkZpbGVzKGNvbmZpZywgZmlsZSwgW2J1aWxkTmFtZV0pO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4vLyAgICAgICAgIGFsbFdhdGNoZXJzLnB1c2god2F0Y2gpO1xyXG4vLyAgICAgfSk7XHJcbi8vIH1cclxuXHJcbmV4cG9ydCBjb25zdCBydW5CdWlsZCA9IGZ1bmN0aW9uKGJ1aWxkcz86IHN0cmluZ1tdKSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ2V4ZWN1dGVkIGF0ICcgKyBuZXcgRGF0ZSgpLnRvVGltZVN0cmluZygpKTtcclxuICAgIFxyXG4gICAgY29uc3QgY29uZmlnID0gTWF0ZUNvbmZpZy5nZXQoKTtcclxuXHJcbiAgICBjb25maWcuZmlsZXMuZm9yRWFjaCgoZmlsZSk6IHZvaWQgPT4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJ1bkZpbGVzKGNvbmZpZywgZmlsZSwgYnVpbGRzKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5jb25zdCBydW5GaWxlcyA9IGZ1bmN0aW9uKGNvbmZpZzogTWF0ZUNvbmZpZywgZmlsZTogTWF0ZUNvbmZpZ0ZpbGUsIGJ1aWxkcz86IHN0cmluZ1tdKSB7XHJcbiAgICBcclxuICAgIGlmIChidWlsZHMgPT09IHVuZGVmaW5lZCB8fCAoYnVpbGRzICE9PSBudWxsICYmIGJ1aWxkcy5sZW5ndGggPT09IDApKVxyXG4gICAgICAgIGJ1aWxkcyA9IFsnZGV2J107XHJcblxyXG4gICAgZmlsZS5vdXRwdXQuZm9yRWFjaCgob3V0cHV0KSA9PiB7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBvdXRwdXRFeHRlbnRpb24gPSBvdXRwdXQuc3BsaXQoJy4nKS5wb3AoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IG91dHB1dEZpbGVOYW1lID0gb3V0cHV0LnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKTtcclxuXHJcbiAgICAgICAgZmlsZS5idWlsZHMuZm9yRWFjaCgoYnVpbGROYW1lKTogdm9pZCA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYnVpbGRzICE9PSBudWxsICYmIGJ1aWxkcy5pbmRleE9mKGJ1aWxkTmFtZSkgPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYnVpbGQgPSBjb25maWcuZ2V0QnVpbGQoYnVpbGROYW1lKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgbGV0IG91dHB1dERpcmVjdG9yeSA9IGJ1aWxkLm91dERpciA/IGJ1aWxkLm91dERpciA6IHBhdGguZGlybmFtZShvdXRwdXQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJ1aWxkLm91dERpclZlcnNpb25pbmcpXHJcbiAgICAgICAgICAgICAgICBvdXRwdXREaXJlY3RvcnkgKz0gJy8nICsgY29uZmlnLmdldE91dERpclZlcnNpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChidWlsZC5vdXREaXJOYW1lKVxyXG4gICAgICAgICAgICAgICAgb3V0cHV0RGlyZWN0b3J5ICs9ICcvJyArIGNvbmZpZy5nZXRPdXREaXJOYW1lKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzd2l0Y2ggKG91dHB1dEV4dGVudGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Nzcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1aWxkLmNzcy5vdXREaXJTdWZmaXgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dERpcmVjdG9yeSArPSAnLycgKyBidWlsZC5jc3Mub3V0RGlyU3VmZml4O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdqcyc6IFxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWlsZC5qcy5vdXREaXJTdWZmaXgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dERpcmVjdG9yeSArPSAnLycgKyBidWlsZC5qcy5vdXREaXJTdWZmaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoYnVpbGQuanMuZGVjbGFyYXRpb24gPT09IHRydWUpXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVUeXBlU2NyaXB0RGVjbGFyYXRpb24oZmlsZS5pbnB1dCwgb3V0cHV0RGlyZWN0b3J5LCBvdXRwdXRGaWxlTmFtZSwgYnVpbGQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBwcm9jZXNzID0gYnVuZGxlKGZpbGUuaW5wdXQsIGJ1aWxkKVxyXG4gICAgICAgICAgICAgICAgLnBpcGUoZ3VscENvbmNhdCgnZW1wdHknKSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG91dHB1dEV4dGVudGlvbikge1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnanMnOiBcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1aWxkLmpzLndlYkNsZWFuKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VzcyA9IHByb2Nlc3MucGlwZSh3ZWJDbGVhbigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcHJvY2VzcyA9IHByb2Nlc3MucGlwZShndWxwUmVuYW1lKG91dHB1dEZpbGVOYW1lKSlcclxuICAgICAgICAgICAgICAgIC5waXBlKGd1bHAuZGVzdChvdXRwdXREaXJlY3RvcnkpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN3aXRjaCAob3V0cHV0RXh0ZW50aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnY3NzJzpcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVpbGQuY3NzLm1pbmlmeSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5waXBlKGd1bHBDbGVhbkNTUygpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucGlwZShndWxwUmVuYW1lKHtzdWZmaXg6IFwiLm1pblwifSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5waXBlKGd1bHAuZGVzdChvdXRwdXREaXJlY3RvcnkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnanMnOiBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWlsZC5qcy5taW5pZnkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MucGlwZShndWxwTWluaWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dDp7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOicuanMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjonLm1pbi5qcydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnBpcGUoZ3VscC5kZXN0KG91dHB1dERpcmVjdG9yeSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxufSJdfQ==
