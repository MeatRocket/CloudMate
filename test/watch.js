#!/usr/bin/env node
"use strict";
exports.__esModule = true;
var config_1 = require("./config");
var chokidar = require("chokidar");
var main_1 = require("./main");
var config = config_1.MateConfig.fromFile('mateconfig.json');
var allWatchers = [];
var watch = function () {
    var configWatcher = chokidar.watch('mateconfig.json', { persistent: true })
        .on('change', function (event, path) {
        allWatchers.forEach(function (watcher) {
            watcher.close();
        });
        allWatchers = [];
        config = config_1.MateConfig.fromFile('mateconfig.json');
        main_1.run(config);
        watch();
    });
    allWatchers.push(configWatcher);
    config.files.forEach(function (file) {
        file.builds.forEach(function (buildName) {
            if (buildName == 'dev') {
                var watch_1 = chokidar.watch(file.input, { persistent: true })
                    .on('change', function (event, path) {
                    main_1.runFiles(config, file, [buildName]);
                });
                allWatchers.push(watch_1);
            }
        });
    });
};
main_1.run(config);
watch();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLG1DQUFzQztBQUN0QyxtQ0FBc0M7QUFDdEMsK0JBQXVDO0FBRXZDLElBQUksTUFBTSxHQUFHLG1CQUFVLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDcEQsSUFBSSxXQUFXLEdBQXlCLEVBQUUsQ0FBQztBQUUzQyxJQUFNLEtBQUssR0FBRztJQUVWLElBQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFDLENBQUM7U0FDM0MsRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFDLEtBQUssRUFBRSxJQUFZO1FBRTlCLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUEyQjtZQUU1QyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBRWpCLE1BQU0sR0FBRyxtQkFBVSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRWhELFVBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNaLEtBQUssRUFBRSxDQUFDO0lBQ1osQ0FBQyxDQUFDLENBQUM7SUFFbkMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVoQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUk7UUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxTQUFTO1lBRTFCLElBQUksU0FBUyxJQUFJLEtBQUssRUFBRTtnQkFFcEIsSUFBTSxPQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBQyxDQUFDO3FCQUNwQyxFQUFFLENBQUMsUUFBUSxFQUFFLFVBQUMsS0FBSyxFQUFFLElBQVk7b0JBQzlCLGVBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDeEMsQ0FBQyxDQUFDLENBQUM7Z0JBRTNCLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBSyxDQUFDLENBQUM7YUFDM0I7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBRUYsVUFBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ1osS0FBSyxFQUFFLENBQUMiLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXHJcblxyXG5pbXBvcnQgeyBNYXRlQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcbmltcG9ydCBjaG9raWRhciA9IHJlcXVpcmUoJ2Nob2tpZGFyJyk7XHJcbmltcG9ydCB7IHJ1bkZpbGVzLCBydW4gfSBmcm9tIFwiLi9tYWluXCI7XHJcblxyXG5sZXQgY29uZmlnID0gTWF0ZUNvbmZpZy5mcm9tRmlsZSgnbWF0ZWNvbmZpZy5qc29uJyk7XHJcbmxldCBhbGxXYXRjaGVyczogY2hva2lkYXIuRlNXYXRjaGVyW10gPSBbXTtcclxuXHJcbmNvbnN0IHdhdGNoID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZ1dhdGNoZXIgPSBjaG9raWRhci53YXRjaCgnbWF0ZWNvbmZpZy5qc29uJywgeyBwZXJzaXN0ZW50OiB0cnVlfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdjaGFuZ2UnLCAoZXZlbnQsIHBhdGg6IHN0cmluZykgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFdhdGNoZXJzLmZvckVhY2goKHdhdGNoZXI6IGNob2tpZGFyLkZTV2F0Y2hlcikgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXRjaGVyLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxXYXRjaGVycyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IE1hdGVDb25maWcuZnJvbUZpbGUoJ21hdGVjb25maWcuanNvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW4oY29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgIGFsbFdhdGNoZXJzLnB1c2goY29uZmlnV2F0Y2hlcik7XHJcblxyXG4gICAgY29uZmlnLmZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcclxuICAgICAgICBmaWxlLmJ1aWxkcy5mb3JFYWNoKChidWlsZE5hbWUpID0+IHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChidWlsZE5hbWUgPT0gJ2RldicpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB3YXRjaCA9IGNob2tpZGFyLndhdGNoKGZpbGUuaW5wdXQsIHsgcGVyc2lzdGVudDogdHJ1ZX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oJ2NoYW5nZScsIChldmVudCwgcGF0aDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuRmlsZXMoY29uZmlnLCBmaWxlLCBbYnVpbGROYW1lXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbGxXYXRjaGVycy5wdXNoKHdhdGNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5ydW4oY29uZmlnKTtcclxud2F0Y2goKTsiXX0=
