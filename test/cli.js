#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var minimist = require("minimist");
var config_1 = require("./config");
var bundler_1 = require("./bundler");
var matePackage;
var setPackage = function () {
    matePackage = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json')).toString());
};
var getPackageInfo = function (info) {
    if (!matePackage)
        setPackage();
    return matePackage[info];
};
var args = minimist(process.argv.slice(2));
var versionArgs = args.v || args.version;
var helpArgs = args.h || args.help;
var watchArgs = args.w || args.watch;
var allArgs = args.a || args.all;
var builds = allArgs === true ? null : args._;
if (versionArgs)
    console.log(getPackageInfo('version'));
if (helpArgs) {
    console.log('Usage: mate [builds] [options]');
    console.log('mate\t\t\t will run dev build only');
    console.log('mate dist\t\t will run dist build only');
    console.log('mate dev dist abc\t will run dev, dist, and abc builds only');
    console.log('\nOptions:');
    console.log('-a, --all\t\t run all builds');
    console.log('-h, --help\t\t print mate command line options (currently set)');
    console.log('-v, --version\t\t print CloudMate.js version');
    console.log('-w, --watch\t\t watch defined inputs under the specified build(s)');
}
if (!versionArgs && !helpArgs) {
    var config = config_1.MateConfig.get();
    if (config) {
        if (watchArgs) {
            bundler_1.MateBundler.watch(config, builds);
        }
        else {
            bundler_1.MateBundler.execute(config, builds);
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSx1QkFBMEI7QUFDMUIsMkJBQThCO0FBQzlCLG1DQUFzQztBQUN0QyxtQ0FBc0M7QUFDdEMscUNBQXdDO0FBRXhDLElBQUksV0FBbUIsQ0FBQztBQUN4QixJQUFNLFVBQVUsR0FBRztJQUNsQixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ2xHLENBQUMsQ0FBQztBQUVGLElBQU0sY0FBYyxHQUFHLFVBQVUsSUFBWTtJQUM1QyxJQUFJLENBQUMsV0FBVztRQUFFLFVBQVUsRUFBRSxDQUFDO0lBRS9CLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUlGLElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTdDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUMzQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDckMsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3ZDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNuQyxJQUFNLE1BQU0sR0FBRyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFJaEQsSUFBSSxXQUFXO0lBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUl4RCxJQUFJLFFBQVEsRUFBRTtJQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0lBQ3RELE9BQU8sQ0FBQyxHQUFHLENBQUMsNkRBQTZELENBQUMsQ0FBQztJQUMzRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLGdFQUFnRSxDQUFDLENBQUM7SUFDOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUVBQW1FLENBQUMsQ0FBQztDQUNqRjtBQUVELElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDOUIsSUFBTSxNQUFNLEdBQUcsbUJBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUVoQyxJQUFJLE1BQU0sRUFBRTtRQUNYLElBQUksU0FBUyxFQUFFO1lBQ2QscUJBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDTixxQkFBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDcEM7S0FDRDtDQUNEIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IG1pbmltaXN0ID0gcmVxdWlyZSgnbWluaW1pc3QnKTtcbmltcG9ydCB7IE1hdGVDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBNYXRlQnVuZGxlciB9IGZyb20gJy4vYnVuZGxlcic7XG5cbmxldCBtYXRlUGFja2FnZTogb2JqZWN0O1xuY29uc3Qgc2V0UGFja2FnZSA9IGZ1bmN0aW9uICgpIHtcblx0bWF0ZVBhY2thZ2UgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vcGFja2FnZS5qc29uJykpLnRvU3RyaW5nKCkpO1xufTtcblxuY29uc3QgZ2V0UGFja2FnZUluZm8gPSBmdW5jdGlvbiAoaW5mbzogc3RyaW5nKSB7XG5cdGlmICghbWF0ZVBhY2thZ2UpIHNldFBhY2thZ2UoKTtcblxuXHRyZXR1cm4gbWF0ZVBhY2thZ2VbaW5mb107XG59O1xuXG4vLyBBcmdzXG5cbmNvbnN0IGFyZ3MgPSBtaW5pbWlzdChwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpO1xuXG5jb25zdCB2ZXJzaW9uQXJncyA9IGFyZ3MudiB8fCBhcmdzLnZlcnNpb247XG5jb25zdCBoZWxwQXJncyA9IGFyZ3MuaCB8fCBhcmdzLmhlbHA7XG5jb25zdCB3YXRjaEFyZ3MgPSBhcmdzLncgfHwgYXJncy53YXRjaDtcbmNvbnN0IGFsbEFyZ3MgPSBhcmdzLmEgfHwgYXJncy5hbGw7XG5jb25zdCBidWlsZHMgPSBhbGxBcmdzID09PSB0cnVlID8gbnVsbCA6IGFyZ3MuXztcblxuLy8gVmVyc2lvblxuXG5pZiAodmVyc2lvbkFyZ3MpIGNvbnNvbGUubG9nKGdldFBhY2thZ2VJbmZvKCd2ZXJzaW9uJykpO1xuXG4vLyBIZWxwXG5cbmlmIChoZWxwQXJncykge1xuXHRjb25zb2xlLmxvZygnVXNhZ2U6IG1hdGUgW2J1aWxkc10gW29wdGlvbnNdJyk7XG5cdGNvbnNvbGUubG9nKCdtYXRlXFx0XFx0XFx0IHdpbGwgcnVuIGRldiBidWlsZCBvbmx5Jyk7XG5cdGNvbnNvbGUubG9nKCdtYXRlIGRpc3RcXHRcXHQgd2lsbCBydW4gZGlzdCBidWlsZCBvbmx5Jyk7XG5cdGNvbnNvbGUubG9nKCdtYXRlIGRldiBkaXN0IGFiY1xcdCB3aWxsIHJ1biBkZXYsIGRpc3QsIGFuZCBhYmMgYnVpbGRzIG9ubHknKTtcblx0Y29uc29sZS5sb2coJ1xcbk9wdGlvbnM6Jyk7XG5cdGNvbnNvbGUubG9nKCctYSwgLS1hbGxcXHRcXHQgcnVuIGFsbCBidWlsZHMnKTtcblx0Y29uc29sZS5sb2coJy1oLCAtLWhlbHBcXHRcXHQgcHJpbnQgbWF0ZSBjb21tYW5kIGxpbmUgb3B0aW9ucyAoY3VycmVudGx5IHNldCknKTtcblx0Y29uc29sZS5sb2coJy12LCAtLXZlcnNpb25cXHRcXHQgcHJpbnQgQ2xvdWRNYXRlLmpzIHZlcnNpb24nKTtcblx0Y29uc29sZS5sb2coJy13LCAtLXdhdGNoXFx0XFx0IHdhdGNoIGRlZmluZWQgaW5wdXRzIHVuZGVyIHRoZSBzcGVjaWZpZWQgYnVpbGQocyknKTtcbn1cblxuaWYgKCF2ZXJzaW9uQXJncyAmJiAhaGVscEFyZ3MpIHtcblx0Y29uc3QgY29uZmlnID0gTWF0ZUNvbmZpZy5nZXQoKTtcblxuXHRpZiAoY29uZmlnKSB7XG5cdFx0aWYgKHdhdGNoQXJncykge1xuXHRcdFx0TWF0ZUJ1bmRsZXIud2F0Y2goY29uZmlnLCBidWlsZHMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRNYXRlQnVuZGxlci5leGVjdXRlKGNvbmZpZywgYnVpbGRzKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==
