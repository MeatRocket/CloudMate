#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var minimist = require("minimist");
var config_1 = require("./config");
var bundler_1 = require("./bundler");
var compressor_1 = require("./compressor");
var matePackage;
var setPackage = function () {
    matePackage = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json')).toString());
};
var getPackageInfo = function (info) {
    if (!matePackage)
        setPackage();
    return matePackage[info];
};
var args = minimist(process.argv.slice(2));
var versionArgs = args.v || args.version;
var helpArgs = args.h || args.help;
var watchArgs = args.w || args.watch;
var allArgs = args.a || args.all;
var builds = allArgs === true ? null : args._;
if (versionArgs)
    console.log(getPackageInfo('version'));
if (helpArgs) {
    console.log('Usage: mate [builds] [options]');
    console.log('mate\t\t\t will run dev build only');
    console.log('mate dist\t\t will run dist build only');
    console.log('mate dev dist abc\t will run dev, dist, and abc builds only');
    console.log('\nOptions:');
    console.log('-a, --all\t\t run all builds');
    console.log('-h, --help\t\t print mate command line options (currently set)');
    console.log('-v, --version\t\t print CloudMate.js version');
    console.log('-w, --watch\t\t watch defined inputs under the specified build(s)');
}
if (!versionArgs && !helpArgs) {
    var config = config_1.MateConfig.get();
    if (config) {
        if (watchArgs) {
            bundler_1.MateBundler.watch(config, builds);
            compressor_1.MateCompressor.watch(config);
        }
        else {
            bundler_1.MateBundler.execute(config, builds);
            compressor_1.MateCompressor.execute(config);
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSx1QkFBMEI7QUFDMUIsMkJBQThCO0FBQzlCLG1DQUFzQztBQUN0QyxtQ0FBc0M7QUFDdEMscUNBQXdDO0FBQ3hDLDJDQUE4QztBQUU5QyxJQUFJLFdBQW1CLENBQUM7QUFDeEIsSUFBTSxVQUFVLEdBQUc7SUFDbEIsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNsRyxDQUFDLENBQUM7QUFFRixJQUFNLGNBQWMsR0FBRyxVQUFVLElBQVk7SUFDNUMsSUFBSSxDQUFDLFdBQVc7UUFBRSxVQUFVLEVBQUUsQ0FBQztJQUUvQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFJRixJQUFNLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU3QyxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDM0MsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3JDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN2QyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDbkMsSUFBTSxNQUFNLEdBQUcsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBSWhELElBQUksV0FBVztJQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFJeEQsSUFBSSxRQUFRLEVBQUU7SUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLENBQUMsQ0FBQztJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLDZEQUE2RCxDQUFDLENBQUM7SUFDM0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO0lBQzlFLE9BQU8sQ0FBQyxHQUFHLENBQUMsOENBQThDLENBQUMsQ0FBQztJQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7Q0FDakY7QUFFRCxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsUUFBUSxFQUFFO0lBQzlCLElBQU0sTUFBTSxHQUFHLG1CQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFaEMsSUFBSSxNQUFNLEVBQUU7UUFDWCxJQUFJLFNBQVMsRUFBRTtZQUNkLHFCQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNsQywyQkFBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QjthQUFNO1lBQ04scUJBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3BDLDJCQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9CO0tBQ0Q7Q0FDRCIsImZpbGUiOiJjbGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBtaW5pbWlzdCA9IHJlcXVpcmUoJ21pbmltaXN0Jyk7XG5pbXBvcnQgeyBNYXRlQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgTWF0ZUJ1bmRsZXIgfSBmcm9tICcuL2J1bmRsZXInO1xuaW1wb3J0IHsgTWF0ZUNvbXByZXNzb3IgfSBmcm9tICcuL2NvbXByZXNzb3InO1xuXG5sZXQgbWF0ZVBhY2thZ2U6IG9iamVjdDtcbmNvbnN0IHNldFBhY2thZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdG1hdGVQYWNrYWdlID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL3BhY2thZ2UuanNvbicpKS50b1N0cmluZygpKTtcbn07XG5cbmNvbnN0IGdldFBhY2thZ2VJbmZvID0gZnVuY3Rpb24gKGluZm86IHN0cmluZykge1xuXHRpZiAoIW1hdGVQYWNrYWdlKSBzZXRQYWNrYWdlKCk7XG5cblx0cmV0dXJuIG1hdGVQYWNrYWdlW2luZm9dO1xufTtcblxuLy8gQXJnc1xuXG5jb25zdCBhcmdzID0gbWluaW1pc3QocHJvY2Vzcy5hcmd2LnNsaWNlKDIpKTtcblxuY29uc3QgdmVyc2lvbkFyZ3MgPSBhcmdzLnYgfHwgYXJncy52ZXJzaW9uO1xuY29uc3QgaGVscEFyZ3MgPSBhcmdzLmggfHwgYXJncy5oZWxwO1xuY29uc3Qgd2F0Y2hBcmdzID0gYXJncy53IHx8IGFyZ3Mud2F0Y2g7XG5jb25zdCBhbGxBcmdzID0gYXJncy5hIHx8IGFyZ3MuYWxsO1xuY29uc3QgYnVpbGRzID0gYWxsQXJncyA9PT0gdHJ1ZSA/IG51bGwgOiBhcmdzLl87XG5cbi8vIFZlcnNpb25cblxuaWYgKHZlcnNpb25BcmdzKSBjb25zb2xlLmxvZyhnZXRQYWNrYWdlSW5mbygndmVyc2lvbicpKTtcblxuLy8gSGVscFxuXG5pZiAoaGVscEFyZ3MpIHtcblx0Y29uc29sZS5sb2coJ1VzYWdlOiBtYXRlIFtidWlsZHNdIFtvcHRpb25zXScpO1xuXHRjb25zb2xlLmxvZygnbWF0ZVxcdFxcdFxcdCB3aWxsIHJ1biBkZXYgYnVpbGQgb25seScpO1xuXHRjb25zb2xlLmxvZygnbWF0ZSBkaXN0XFx0XFx0IHdpbGwgcnVuIGRpc3QgYnVpbGQgb25seScpO1xuXHRjb25zb2xlLmxvZygnbWF0ZSBkZXYgZGlzdCBhYmNcXHQgd2lsbCBydW4gZGV2LCBkaXN0LCBhbmQgYWJjIGJ1aWxkcyBvbmx5Jyk7XG5cdGNvbnNvbGUubG9nKCdcXG5PcHRpb25zOicpO1xuXHRjb25zb2xlLmxvZygnLWEsIC0tYWxsXFx0XFx0IHJ1biBhbGwgYnVpbGRzJyk7XG5cdGNvbnNvbGUubG9nKCctaCwgLS1oZWxwXFx0XFx0IHByaW50IG1hdGUgY29tbWFuZCBsaW5lIG9wdGlvbnMgKGN1cnJlbnRseSBzZXQpJyk7XG5cdGNvbnNvbGUubG9nKCctdiwgLS12ZXJzaW9uXFx0XFx0IHByaW50IENsb3VkTWF0ZS5qcyB2ZXJzaW9uJyk7XG5cdGNvbnNvbGUubG9nKCctdywgLS13YXRjaFxcdFxcdCB3YXRjaCBkZWZpbmVkIGlucHV0cyB1bmRlciB0aGUgc3BlY2lmaWVkIGJ1aWxkKHMpJyk7XG59XG5cbmlmICghdmVyc2lvbkFyZ3MgJiYgIWhlbHBBcmdzKSB7XG5cdGNvbnN0IGNvbmZpZyA9IE1hdGVDb25maWcuZ2V0KCk7XG5cblx0aWYgKGNvbmZpZykge1xuXHRcdGlmICh3YXRjaEFyZ3MpIHtcblx0XHRcdE1hdGVCdW5kbGVyLndhdGNoKGNvbmZpZywgYnVpbGRzKTtcblx0XHRcdE1hdGVDb21wcmVzc29yLndhdGNoKGNvbmZpZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdE1hdGVCdW5kbGVyLmV4ZWN1dGUoY29uZmlnLCBidWlsZHMpO1xuXHRcdFx0TWF0ZUNvbXByZXNzb3IuZXhlY3V0ZShjb25maWcpO1xuXHRcdH1cblx0fVxufVxuIl19
