#!/usr/bin/env node
"use strict";
exports.__esModule = true;
var main_1 = require("./main");
var fs = require("fs");
var path = require("path");
var minimist = require("minimist");
var matePackage;
var setPackage = function () {
    matePackage = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json')).toString());
};
var getPackageInfo = function (info) {
    if (!matePackage)
        setPackage();
    return matePackage[info];
};
// Args
var args = minimist(process.argv.slice(2));
var versionArgs = args.v || args.version;
var helpArgs = args.h || args.help;
var watchArgs = args.w || args.watch;
var allArgs = args.a || args.all;
var builds = allArgs === true ? null : args._;
// Version
if (versionArgs)
    console.log(getPackageInfo('version'));
// Help
if (helpArgs) {
    console.log('Usage: mate [builds] [options]');
    console.log('mate\t\t\t will run dev build only');
    console.log('mate dist\t\t will run dist build only');
    console.log('mate dev dist abc\t will run dev, dist, and abc builds only');
    console.log('\nOptions:');
    console.log('-a, --all\t\t run all builds');
    console.log('-h, --help\t\t print mate command line options (currently set)');
    console.log('-v, --version\t\t print CloudMate.js version');
    console.log('-w, --watch\t\t watch defined inputs under the specified build(s)');
}
if (!versionArgs && !helpArgs) {
    if (watchArgs)
        main_1.watch(builds);
    else
        main_1.runBuild(builds);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSwrQkFBeUM7QUFDekMsdUJBQTBCO0FBQzFCLDJCQUE4QjtBQUM5QixtQ0FBc0M7QUFFdEMsSUFBSSxXQUFtQixDQUFDO0FBQ3hCLElBQU0sVUFBVSxHQUFHO0lBQ2YsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNyRyxDQUFDLENBQUE7QUFFRCxJQUFNLGNBQWMsR0FBRyxVQUFTLElBQVk7SUFFeEMsSUFBSSxDQUFDLFdBQVc7UUFDWixVQUFVLEVBQUUsQ0FBQztJQUVqQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUE7QUFFRCxPQUFPO0FBRVAsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFN0MsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQzNDLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztBQUNyQyxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDdkMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ25DLElBQU0sTUFBTSxHQUFHLE9BQU8sS0FBSyxJQUFJLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUUvQyxVQUFVO0FBRVYsSUFBSSxXQUFXO0lBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUUzQyxPQUFPO0FBRVAsSUFBSSxRQUFRLEVBQUM7SUFFVCxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLENBQUMsQ0FBQztJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLDZEQUE2RCxDQUFDLENBQUM7SUFDM0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO0lBQzlFLE9BQU8sQ0FBQyxHQUFHLENBQUMsOENBQThDLENBQUMsQ0FBQztJQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7Q0FDcEY7QUFFRCxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsUUFBUSxFQUM3QjtJQUNJLElBQUksU0FBUztRQUNULFlBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzs7UUFDYixlQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDekIiLCJmaWxlIjoiY2xpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxyXG5cclxuaW1wb3J0IHsgcnVuQnVpbGQsIHdhdGNoIH0gZnJvbSBcIi4vbWFpblwiO1xyXG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcycpO1xyXG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuaW1wb3J0IG1pbmltaXN0ID0gcmVxdWlyZSgnbWluaW1pc3QnKTtcclxuXHJcbmxldCBtYXRlUGFja2FnZTogb2JqZWN0O1xyXG5jb25zdCBzZXRQYWNrYWdlID0gZnVuY3Rpb24oKXtcclxuICAgIG1hdGVQYWNrYWdlID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL3BhY2thZ2UuanNvbicpKS50b1N0cmluZygpKTtcclxufVxyXG5cclxuY29uc3QgZ2V0UGFja2FnZUluZm8gPSBmdW5jdGlvbihpbmZvOiBzdHJpbmcpe1xyXG5cclxuICAgIGlmICghbWF0ZVBhY2thZ2UpXHJcbiAgICAgICAgc2V0UGFja2FnZSgpO1xyXG5cclxuICAgIHJldHVybiBtYXRlUGFja2FnZVtpbmZvXTtcclxufVxyXG5cclxuLy8gQXJnc1xyXG5cclxuY29uc3QgYXJncyA9IG1pbmltaXN0KHByb2Nlc3MuYXJndi5zbGljZSgyKSk7XHJcblxyXG5jb25zdCB2ZXJzaW9uQXJncyA9IGFyZ3MudiB8fCBhcmdzLnZlcnNpb247XHJcbmNvbnN0IGhlbHBBcmdzID0gYXJncy5oIHx8IGFyZ3MuaGVscDtcclxuY29uc3Qgd2F0Y2hBcmdzID0gYXJncy53IHx8IGFyZ3Mud2F0Y2g7XHJcbmNvbnN0IGFsbEFyZ3MgPSBhcmdzLmEgfHwgYXJncy5hbGw7XHJcbmNvbnN0IGJ1aWxkcyA9IGFsbEFyZ3MgPT09IHRydWU/IG51bGwgOiBhcmdzLl87XHJcblxyXG4vLyBWZXJzaW9uXHJcblxyXG5pZiAodmVyc2lvbkFyZ3MpXHJcbiAgICBjb25zb2xlLmxvZyhnZXRQYWNrYWdlSW5mbygndmVyc2lvbicpKTtcclxuXHJcbi8vIEhlbHBcclxuXHJcbmlmIChoZWxwQXJncyl7XHJcbiBcclxuICAgIGNvbnNvbGUubG9nKCdVc2FnZTogbWF0ZSBbYnVpbGRzXSBbb3B0aW9uc10nKTtcclxuICAgIGNvbnNvbGUubG9nKCdtYXRlXFx0XFx0XFx0IHdpbGwgcnVuIGRldiBidWlsZCBvbmx5Jyk7XHJcbiAgICBjb25zb2xlLmxvZygnbWF0ZSBkaXN0XFx0XFx0IHdpbGwgcnVuIGRpc3QgYnVpbGQgb25seScpO1xyXG4gICAgY29uc29sZS5sb2coJ21hdGUgZGV2IGRpc3QgYWJjXFx0IHdpbGwgcnVuIGRldiwgZGlzdCwgYW5kIGFiYyBidWlsZHMgb25seScpO1xyXG4gICAgY29uc29sZS5sb2coJ1xcbk9wdGlvbnM6Jyk7XHJcbiAgICBjb25zb2xlLmxvZygnLWEsIC0tYWxsXFx0XFx0IHJ1biBhbGwgYnVpbGRzJyk7XHJcbiAgICBjb25zb2xlLmxvZygnLWgsIC0taGVscFxcdFxcdCBwcmludCBtYXRlIGNvbW1hbmQgbGluZSBvcHRpb25zIChjdXJyZW50bHkgc2V0KScpO1xyXG4gICAgY29uc29sZS5sb2coJy12LCAtLXZlcnNpb25cXHRcXHQgcHJpbnQgQ2xvdWRNYXRlLmpzIHZlcnNpb24nKTtcclxuICAgIGNvbnNvbGUubG9nKCctdywgLS13YXRjaFxcdFxcdCB3YXRjaCBkZWZpbmVkIGlucHV0cyB1bmRlciB0aGUgc3BlY2lmaWVkIGJ1aWxkKHMpJyk7XHJcbn1cclxuXHJcbmlmICghdmVyc2lvbkFyZ3MgJiYgIWhlbHBBcmdzKVxyXG57XHJcbiAgICBpZiAod2F0Y2hBcmdzKVxyXG4gICAgICAgIHdhdGNoKGJ1aWxkcyk7XHJcbiAgICBlbHNlIHJ1bkJ1aWxkKGJ1aWxkcyk7XHJcbn0iXX0=
