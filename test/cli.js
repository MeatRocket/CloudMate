#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var minimist = require("minimist");
var formatter_1 = require("./formatter");
var config_1 = require("./config");
var bundler_1 = require("./bundler");
var matePackage;
var setPackage = function () {
    matePackage = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json')).toString());
};
var getPackageInfo = function (info) {
    if (!matePackage)
        setPackage();
    return matePackage[info];
};
var args = minimist(process.argv.slice(2));
var versionArgs = args.v || args.version;
var helpArgs = args.h || args.help;
var watchArgs = args.w || args.watch;
var allArgs = args.a || args.all;
var builds = allArgs === true ? null : args._;
if (versionArgs)
    console.log(getPackageInfo('version'));
if (helpArgs) {
    console.log('Usage: mate [builds] [options]');
    console.log('mate\t\t\t will run dev build only');
    console.log('mate dist\t\t will run dist build only');
    console.log('mate dev dist abc\t will run dev, dist, and abc builds only');
    console.log('\nOptions:');
    console.log('-a, --all\t\t run all builds');
    console.log('-h, --help\t\t print mate command line options (currently set)');
    console.log('-v, --version\t\t print CloudMate.js version');
    console.log('-w, --watch\t\t watch defined inputs under the specified build(s)');
}
if (!versionArgs && !helpArgs) {
    var config = config_1.MateConfig.get();
    if (config) {
        if (watchArgs) {
            bundler_1.MateBundler.watch(config, builds);
            formatter_1.MateFormatter.watch(config);
        }
        else {
            bundler_1.MateBundler.execute(config, builds);
            formatter_1.MateFormatter.execute(config);
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSx1QkFBMEI7QUFDMUIsMkJBQThCO0FBQzlCLG1DQUFzQztBQUN0Qyx5Q0FBNEM7QUFDNUMsbUNBQXNDO0FBQ3RDLHFDQUF3QztBQUV4QyxJQUFJLFdBQW1CLENBQUM7QUFDeEIsSUFBTSxVQUFVLEdBQUc7SUFDbEIsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNsRyxDQUFDLENBQUM7QUFFRixJQUFNLGNBQWMsR0FBRyxVQUFVLElBQVk7SUFDNUMsSUFBSSxDQUFDLFdBQVc7UUFBRSxVQUFVLEVBQUUsQ0FBQztJQUUvQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFJRixJQUFNLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU3QyxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDM0MsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3JDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN2QyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDbkMsSUFBTSxNQUFNLEdBQUcsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBSWhELElBQUksV0FBVztJQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFJeEQsSUFBSSxRQUFRLEVBQUU7SUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLENBQUMsQ0FBQztJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLDZEQUE2RCxDQUFDLENBQUM7SUFDM0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO0lBQzlFLE9BQU8sQ0FBQyxHQUFHLENBQUMsOENBQThDLENBQUMsQ0FBQztJQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7Q0FDakY7QUFFRCxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsUUFBUSxFQUFFO0lBQzlCLElBQU0sTUFBTSxHQUFHLG1CQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFaEMsSUFBSSxNQUFNLEVBQUU7UUFDWCxJQUFJLFNBQVMsRUFBRTtZQUNkLHFCQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNsQyx5QkFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QjthQUFNO1lBQ04scUJBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3BDLHlCQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlCO0tBQ0Q7Q0FDRCIsImZpbGUiOiJjbGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBtaW5pbWlzdCA9IHJlcXVpcmUoJ21pbmltaXN0Jyk7XG5pbXBvcnQgeyBNYXRlRm9ybWF0dGVyIH0gZnJvbSAnLi9mb3JtYXR0ZXInO1xuaW1wb3J0IHsgTWF0ZUNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IE1hdGVCdW5kbGVyIH0gZnJvbSAnLi9idW5kbGVyJztcblxubGV0IG1hdGVQYWNrYWdlOiBvYmplY3Q7XG5jb25zdCBzZXRQYWNrYWdlID0gZnVuY3Rpb24gKCkge1xuXHRtYXRlUGFja2FnZSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9wYWNrYWdlLmpzb24nKSkudG9TdHJpbmcoKSk7XG59O1xuXG5jb25zdCBnZXRQYWNrYWdlSW5mbyA9IGZ1bmN0aW9uIChpbmZvOiBzdHJpbmcpIHtcblx0aWYgKCFtYXRlUGFja2FnZSkgc2V0UGFja2FnZSgpO1xuXG5cdHJldHVybiBtYXRlUGFja2FnZVtpbmZvXTtcbn07XG5cbi8vIEFyZ3NcblxuY29uc3QgYXJncyA9IG1pbmltaXN0KHByb2Nlc3MuYXJndi5zbGljZSgyKSk7XG5cbmNvbnN0IHZlcnNpb25BcmdzID0gYXJncy52IHx8IGFyZ3MudmVyc2lvbjtcbmNvbnN0IGhlbHBBcmdzID0gYXJncy5oIHx8IGFyZ3MuaGVscDtcbmNvbnN0IHdhdGNoQXJncyA9IGFyZ3MudyB8fCBhcmdzLndhdGNoO1xuY29uc3QgYWxsQXJncyA9IGFyZ3MuYSB8fCBhcmdzLmFsbDtcbmNvbnN0IGJ1aWxkcyA9IGFsbEFyZ3MgPT09IHRydWUgPyBudWxsIDogYXJncy5fO1xuXG4vLyBWZXJzaW9uXG5cbmlmICh2ZXJzaW9uQXJncykgY29uc29sZS5sb2coZ2V0UGFja2FnZUluZm8oJ3ZlcnNpb24nKSk7XG5cbi8vIEhlbHBcblxuaWYgKGhlbHBBcmdzKSB7XG5cdGNvbnNvbGUubG9nKCdVc2FnZTogbWF0ZSBbYnVpbGRzXSBbb3B0aW9uc10nKTtcblx0Y29uc29sZS5sb2coJ21hdGVcXHRcXHRcXHQgd2lsbCBydW4gZGV2IGJ1aWxkIG9ubHknKTtcblx0Y29uc29sZS5sb2coJ21hdGUgZGlzdFxcdFxcdCB3aWxsIHJ1biBkaXN0IGJ1aWxkIG9ubHknKTtcblx0Y29uc29sZS5sb2coJ21hdGUgZGV2IGRpc3QgYWJjXFx0IHdpbGwgcnVuIGRldiwgZGlzdCwgYW5kIGFiYyBidWlsZHMgb25seScpO1xuXHRjb25zb2xlLmxvZygnXFxuT3B0aW9uczonKTtcblx0Y29uc29sZS5sb2coJy1hLCAtLWFsbFxcdFxcdCBydW4gYWxsIGJ1aWxkcycpO1xuXHRjb25zb2xlLmxvZygnLWgsIC0taGVscFxcdFxcdCBwcmludCBtYXRlIGNvbW1hbmQgbGluZSBvcHRpb25zIChjdXJyZW50bHkgc2V0KScpO1xuXHRjb25zb2xlLmxvZygnLXYsIC0tdmVyc2lvblxcdFxcdCBwcmludCBDbG91ZE1hdGUuanMgdmVyc2lvbicpO1xuXHRjb25zb2xlLmxvZygnLXcsIC0td2F0Y2hcXHRcXHQgd2F0Y2ggZGVmaW5lZCBpbnB1dHMgdW5kZXIgdGhlIHNwZWNpZmllZCBidWlsZChzKScpO1xufVxuXG5pZiAoIXZlcnNpb25BcmdzICYmICFoZWxwQXJncykge1xuXHRjb25zdCBjb25maWcgPSBNYXRlQ29uZmlnLmdldCgpO1xuXG5cdGlmIChjb25maWcpIHtcblx0XHRpZiAod2F0Y2hBcmdzKSB7XG5cdFx0XHRNYXRlQnVuZGxlci53YXRjaChjb25maWcsIGJ1aWxkcyk7XG5cdFx0XHRNYXRlRm9ybWF0dGVyLndhdGNoKGNvbmZpZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdE1hdGVCdW5kbGVyLmV4ZWN1dGUoY29uZmlnLCBidWlsZHMpO1xuXHRcdFx0TWF0ZUZvcm1hdHRlci5leGVjdXRlKGNvbmZpZyk7XG5cdFx0fVxuXHR9XG59XG4iXX0=
