#!/usr/bin/env node
"use strict";
exports.__esModule = true;
var main_1 = require("./main");
var fs = require("fs");
var path = require("path");
var minimist = require("minimist");
var matePackage;
var setPackage = function () {
    matePackage = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'package.json')).toString());
};
var getPackageInfo = function (info) {
    if (!matePackage)
        setPackage();
    return matePackage[info];
};
var args = minimist(process.argv.slice(2));
// Version
if (args.v || args.version)
    console.log(getPackageInfo('version'));
// Help
if (args.h || args.help) {
    console.log('Usage: mate [builds] [options]');
    console.log('mate\t\t\t will run dev build only');
    console.log('mate dist\t\t will run dist build only');
    console.log('mate dev dist abc\t will run dev, dist, and abc builds only');
    console.log('\nOptions:');
    console.log('-a, --all\t\t run all builds');
    console.log('-h, --help\t\t print mate command line options (currently set)');
    console.log('-v, --version\t\t print CloudMate.js version');
    console.log('-w, --watch\t\t watch defined inputs under the specified build(s)');
}
// Watch
var watchArgs = args.w || args.watch;
var allArgs = args.a || args.all;
var builds = allArgs === true ? null : args._;
if (watchArgs)
    main_1.watch(builds);
else
    main_1.runBuild(builds);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLCtCQUF5QztBQUN6Qyx1QkFBMEI7QUFDMUIsMkJBQThCO0FBQzlCLG1DQUFzQztBQUt0QyxJQUFJLFdBQW1CLENBQUM7QUFDeEIsSUFBTSxVQUFVLEdBQUc7SUFDZixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNsRyxDQUFDLENBQUE7QUFFRCxJQUFNLGNBQWMsR0FBRyxVQUFTLElBQVk7SUFFeEMsSUFBSSxDQUFDLFdBQVc7UUFDWixVQUFVLEVBQUUsQ0FBQztJQUVqQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUE7QUFHRCxJQUFNLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU3QyxVQUFVO0FBRVYsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPO0lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFFM0MsT0FBTztBQUVQLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFDO0lBRXBCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0lBQ3RELE9BQU8sQ0FBQyxHQUFHLENBQUMsNkRBQTZELENBQUMsQ0FBQztJQUMzRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLGdFQUFnRSxDQUFDLENBQUM7SUFDOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUVBQW1FLENBQUMsQ0FBQztDQUNwRjtBQUVELFFBQVE7QUFDUixJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDdkMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ25DLElBQU0sTUFBTSxHQUFHLE9BQU8sS0FBSyxJQUFJLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUUvQyxJQUFJLFNBQVM7SUFDVCxZQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7O0lBQ2IsZUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxyXG5cclxuaW1wb3J0IHsgcnVuQnVpbGQsIHdhdGNoIH0gZnJvbSBcIi4vbWFpblwiO1xyXG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcycpO1xyXG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuaW1wb3J0IG1pbmltaXN0ID0gcmVxdWlyZSgnbWluaW1pc3QnKTtcclxuXHJcblxyXG5cclxuXHJcbmxldCBtYXRlUGFja2FnZTogb2JqZWN0O1xyXG5jb25zdCBzZXRQYWNrYWdlID0gZnVuY3Rpb24oKXtcclxuICAgIG1hdGVQYWNrYWdlID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ3BhY2thZ2UuanNvbicpKS50b1N0cmluZygpKTtcclxufVxyXG5cclxuY29uc3QgZ2V0UGFja2FnZUluZm8gPSBmdW5jdGlvbihpbmZvOiBzdHJpbmcpe1xyXG5cclxuICAgIGlmICghbWF0ZVBhY2thZ2UpXHJcbiAgICAgICAgc2V0UGFja2FnZSgpO1xyXG5cclxuICAgIHJldHVybiBtYXRlUGFja2FnZVtpbmZvXTtcclxufVxyXG5cclxuXHJcbmNvbnN0IGFyZ3MgPSBtaW5pbWlzdChwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpO1xyXG5cclxuLy8gVmVyc2lvblxyXG5cclxuaWYgKGFyZ3MudiB8fCBhcmdzLnZlcnNpb24pXHJcbiAgICBjb25zb2xlLmxvZyhnZXRQYWNrYWdlSW5mbygndmVyc2lvbicpKTtcclxuXHJcbi8vIEhlbHBcclxuXHJcbmlmIChhcmdzLmggfHwgYXJncy5oZWxwKXtcclxuIFxyXG4gICAgY29uc29sZS5sb2coJ1VzYWdlOiBtYXRlIFtidWlsZHNdIFtvcHRpb25zXScpO1xyXG4gICAgY29uc29sZS5sb2coJ21hdGVcXHRcXHRcXHQgd2lsbCBydW4gZGV2IGJ1aWxkIG9ubHknKTtcclxuICAgIGNvbnNvbGUubG9nKCdtYXRlIGRpc3RcXHRcXHQgd2lsbCBydW4gZGlzdCBidWlsZCBvbmx5Jyk7XHJcbiAgICBjb25zb2xlLmxvZygnbWF0ZSBkZXYgZGlzdCBhYmNcXHQgd2lsbCBydW4gZGV2LCBkaXN0LCBhbmQgYWJjIGJ1aWxkcyBvbmx5Jyk7XHJcbiAgICBjb25zb2xlLmxvZygnXFxuT3B0aW9uczonKTtcclxuICAgIGNvbnNvbGUubG9nKCctYSwgLS1hbGxcXHRcXHQgcnVuIGFsbCBidWlsZHMnKTtcclxuICAgIGNvbnNvbGUubG9nKCctaCwgLS1oZWxwXFx0XFx0IHByaW50IG1hdGUgY29tbWFuZCBsaW5lIG9wdGlvbnMgKGN1cnJlbnRseSBzZXQpJyk7XHJcbiAgICBjb25zb2xlLmxvZygnLXYsIC0tdmVyc2lvblxcdFxcdCBwcmludCBDbG91ZE1hdGUuanMgdmVyc2lvbicpO1xyXG4gICAgY29uc29sZS5sb2coJy13LCAtLXdhdGNoXFx0XFx0IHdhdGNoIGRlZmluZWQgaW5wdXRzIHVuZGVyIHRoZSBzcGVjaWZpZWQgYnVpbGQocyknKTtcclxufVxyXG5cclxuLy8gV2F0Y2hcclxuY29uc3Qgd2F0Y2hBcmdzID0gYXJncy53IHx8IGFyZ3Mud2F0Y2g7XHJcbmNvbnN0IGFsbEFyZ3MgPSBhcmdzLmEgfHwgYXJncy5hbGw7XHJcbmNvbnN0IGJ1aWxkcyA9IGFsbEFyZ3MgPT09IHRydWU/IG51bGwgOiBhcmdzLl87XHJcblxyXG5pZiAod2F0Y2hBcmdzKVxyXG4gICAgd2F0Y2goYnVpbGRzKTtcclxuZWxzZSBydW5CdWlsZChidWlsZHMpOyJdfQ==
